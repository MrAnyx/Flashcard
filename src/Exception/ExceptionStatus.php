<?php

namespace App\Exception;

use Symfony\Component\HttpFoundation\Response;

enum ExceptionStatus: int
{
    case CONTINUE = Response::HTTP_CONTINUE;
    case SWITCHING_PROTOCOLS = Response::HTTP_SWITCHING_PROTOCOLS;
    case PROCESSING = Response::HTTP_PROCESSING;
    case EARLY_HINTS = Response::HTTP_EARLY_HINTS;
    case OK = Response::HTTP_OK;
    case CREATED = Response::HTTP_CREATED;
    case ACCEPTED = Response::HTTP_ACCEPTED;
    case NON_AUTHORITATIVE_INFORMATION = Response::HTTP_NON_AUTHORITATIVE_INFORMATION;
    case NO_CONTENT = Response::HTTP_NO_CONTENT;
    case RESET_CONTENT = Response::HTTP_RESET_CONTENT;
    case PARTIAL_CONTENT = Response::HTTP_PARTIAL_CONTENT;
    case MULTI_STATUS = Response::HTTP_MULTI_STATUS;
    case ALREADY_REPORTED = Response::HTTP_ALREADY_REPORTED;
    case IM_USED = Response::HTTP_IM_USED;
    case MULTIPLE_CHOICES = Response::HTTP_MULTIPLE_CHOICES;
    case MOVED_PERMANENTLY = Response::HTTP_MOVED_PERMANENTLY;
    case FOUND = Response::HTTP_FOUND;
    case SEE_OTHER = Response::HTTP_SEE_OTHER;
    case NOT_MODIFIED = Response::HTTP_NOT_MODIFIED;
    case USE_PROXY = Response::HTTP_USE_PROXY;
    case RESERVED = Response::HTTP_RESERVED;
    case TEMPORARY_REDIRECT = Response::HTTP_TEMPORARY_REDIRECT;
    case PERMANENTLY_REDIRECT = Response::HTTP_PERMANENTLY_REDIRECT;
    case BAD_REQUEST = Response::HTTP_BAD_REQUEST;
    case UNAUTHORIZED = Response::HTTP_UNAUTHORIZED;
    case PAYMENT_REQUIRED = Response::HTTP_PAYMENT_REQUIRED;
    case FORBIDDEN = Response::HTTP_FORBIDDEN;
    case NOT_FOUND = Response::HTTP_NOT_FOUND;
    case METHOD_NOT_ALLOWED = Response::HTTP_METHOD_NOT_ALLOWED;
    case NOT_ACCEPTABLE = Response::HTTP_NOT_ACCEPTABLE;
    case PROXY_AUTHENTICATION_REQUIRED = Response::HTTP_PROXY_AUTHENTICATION_REQUIRED;
    case REQUEST_TIMEOUT = Response::HTTP_REQUEST_TIMEOUT;
    case CONFLICT = Response::HTTP_CONFLICT;
    case GONE = Response::HTTP_GONE;
    case LENGTH_REQUIRED = Response::HTTP_LENGTH_REQUIRED;
    case PRECONDITION_FAILED = Response::HTTP_PRECONDITION_FAILED;
    case REQUEST_ENTITY_TOO_LARGE = Response::HTTP_REQUEST_ENTITY_TOO_LARGE;
    case REQUEST_URI_TOO_LONG = Response::HTTP_REQUEST_URI_TOO_LONG;
    case UNSUPPORTED_MEDIA_TYPE = Response::HTTP_UNSUPPORTED_MEDIA_TYPE;
    case REQUESTED_RANGE_NOT_SATISFIABLE = Response::HTTP_REQUESTED_RANGE_NOT_SATISFIABLE;
    case EXPECTATION_FAILED = Response::HTTP_EXPECTATION_FAILED;
    case I_AM_A_TEAPOT = Response::HTTP_I_AM_A_TEAPOT;
    case MISDIRECTED_REQUEST = Response::HTTP_MISDIRECTED_REQUEST;
    case UNPROCESSABLE_ENTITY = Response::HTTP_UNPROCESSABLE_ENTITY;
    case LOCKED = Response::HTTP_LOCKED;
    case FAILED_DEPENDENCY = Response::HTTP_FAILED_DEPENDENCY;
    case TOO_EARLY = Response::HTTP_TOO_EARLY;
    case UPGRADE_REQUIRED = Response::HTTP_UPGRADE_REQUIRED;
    case PRECONDITION_REQUIRED = Response::HTTP_PRECONDITION_REQUIRED;
    case TOO_MANY_REQUESTS = Response::HTTP_TOO_MANY_REQUESTS;
    case REQUEST_HEADER_FIELDS_TOO_LARGE = Response::HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;
    case UNAVAILABLE_FOR_LEGAL_REASONS = Response::HTTP_UNAVAILABLE_FOR_LEGAL_REASONS;
    case INTERNAL_SERVER_ERROR = Response::HTTP_INTERNAL_SERVER_ERROR;
    case NOT_IMPLEMENTED = Response::HTTP_NOT_IMPLEMENTED;
    case BAD_GATEWAY = Response::HTTP_BAD_GATEWAY;
    case SERVICE_UNAVAILABLE = Response::HTTP_SERVICE_UNAVAILABLE;
    case GATEWAY_TIMEOUT = Response::HTTP_GATEWAY_TIMEOUT;
    case VERSION_NOT_SUPPORTED = Response::HTTP_VERSION_NOT_SUPPORTED;
    case VARIANT_ALSO_NEGOTIATES_EXPERIMENTAL = Response::HTTP_VARIANT_ALSO_NEGOTIATES_EXPERIMENTAL;
    case INSUFFICIENT_STORAGE = Response::HTTP_INSUFFICIENT_STORAGE;
    case LOOP_DETECTED = Response::HTTP_LOOP_DETECTED;
    case NOT_EXTENDED = Response::HTTP_NOT_EXTENDED;
    case NETWORK_AUTHENTICATION_REQUIRED = Response::HTTP_NETWORK_AUTHENTICATION_REQUIRED;
}
